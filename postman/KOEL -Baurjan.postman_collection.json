{
	"info": {
		"_postman_id": "f8d8c591-a578-4b48-acc9-5660e371873a",
		"name": "KOEL -Baurjan",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23556863"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Log a user in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"const respBody = pm.response.json();\r",
									"pm.environment.set(\"token\", respBody.token);\r",
									"console.log(respBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"accept": true,
							"accept-encoding": true,
							"connection": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{email}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs in using valid token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's playlists",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/playlist",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"playlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/playlist/29796",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"playlist",
								"29796"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "ABCD",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/playlist",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"playlist"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication test cases",
			"item": [
				{
					"name": "User logs  in with valid credentials",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"accept": true,
							"accept-encoding": true,
							"connection": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "pivovarova.irina@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Bishkek1984!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs  in with valid credentials PATCH method",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"accept": true,
							"accept-encoding": true,
							"connection": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "pivovarova.irina@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Bishkek1984!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs in Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body contains text The email must be a valid email address\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"valid email\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "gmail",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Bishkek1984!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs in with long email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"' Invalid credentials' error should be sand\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "pivovarova.irina111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Bishkek1984!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bbb.testpro.io/api/me",
							"protocol": "https",
							"host": [
								"bbb",
								"testpro",
								"io"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs in with no email field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"'The email field is required' error should be sand\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The email field is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "pivovarova.irina111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111@gmail.com",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "Bishkek1984!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bbb.testpro.io/api/me",
							"protocol": "https",
							"host": [
								"bbb",
								"testpro",
								"io"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs in without password field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"'The email password is required' error should be sand\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The password field is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "pivovarova.irina@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Bishkek1984!",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://bbb.testpro.io/api/me",
							"protocol": "https",
							"host": [
								"bbb",
								"testpro",
								"io"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs in with empty email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"'The email field is required ' error should be sand\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The email field is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Bishkek1984!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bbb.testpro.io/api/me",
							"protocol": "https",
							"host": [
								"bbb",
								"testpro",
								"io"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs in with empty password field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"'The password field is required ' error should be sand\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The password field is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "pivovarova.irina@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bbb.testpro.io/api/me",
							"protocol": "https",
							"host": [
								"bbb",
								"testpro",
								"io"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logs in with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"' Invalid credentials' error should be sand\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "pivovarova.irina@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Bishkek1984!a",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bbb.testpro.io/api/me",
							"protocol": "https",
							"host": [
								"bbb",
								"testpro",
								"io"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Application Data test cases",
			"item": [
				{
					"name": "Get application data Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body returns 'albums'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"albums\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "109142|Ee3IbyoCecAcT6CJlwM6VRSINLhTf43KvMTjFNKB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/data",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"data"
							]
						},
						"description": "The big fat call to retrieve a set of application data catered for the current user\n(songs, albums, artists, playlists, interactions, and if the user is an admin, settings as well).\nNaturally, this call should be made right after the user has been logged in, when you need to populate\nthe application's interface with useful information."
					},
					"response": []
				},
				{
					"name": "Get application data method POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Body returns 'The POST method is not supported'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The POST method is not supported\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/data",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"data"
							]
						},
						"description": "The big fat call to retrieve a set of application data catered for the current user\n(songs, albums, artists, playlists, interactions, and if the user is an admin, settings as well).\nNaturally, this call should be made right after the user has been logged in, when you need to populate\nthe application's interface with useful information."
					},
					"response": []
				},
				{
					"name": "Get application data unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body returns 'It may sound funny, but Koel requires JavaScript to sing. Please enable it.'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"It may sound funny, but Koel requires JavaScript to sing. Please enable it.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/data",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"data"
							]
						},
						"description": "The big fat call to retrieve a set of application data catered for the current user\n(songs, albums, artists, playlists, interactions, and if the user is an admin, settings as well).\nNaturally, this call should be made right after the user has been logged in, when you need to populate\nthe application's interface with useful information."
					},
					"response": []
				}
			]
		},
		{
			"name": "Playlist management",
			"item": [
				{
					"name": "Rename playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/playlist/0?name=New playlist",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"playlist",
								"0"
							],
							"query": [
								{
									"key": "name",
									"value": "New playlist"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename playlist PATCH",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/playlist/0?name=New playlist",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"playlist",
								"0"
							],
							"query": [
								{
									"key": "name",
									"value": "New playlist"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const url = pm.environment.get(\"baseUrl\");",
					"const email = pm.environment.get(\"email\");",
					"const password = pm.environment.get(\"password\");",
					"const requestBody = {",
					"    url: url+\"/api/me\",",
					"    method: 'POST',",
					"    // header: {'Content-Type': 'application/json'},",
					"    // надо быть внимательным с синтаксисом в header оба варианта работают",
					"    header: 'Content-Type:application/json',",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({ \"email\": email, \"password\": password})",
					"        }",
					"",
					"}",
					"",
					"pm.sendRequest(requestBody,function(err,res){",
					"    var jsonData = res.json();",
					"    console.log(jsonData)",
					"    if(err){console.log(err)} else {",
					"        pm.environment.set(\"token\", jsonData.token)",
					"    }",
					"})",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}